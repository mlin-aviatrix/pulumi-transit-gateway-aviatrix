// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package aviatrix

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type TransitModule struct {
	pulumi.ResourceState

	// Name of gateway created.
	GatewayName pulumi.StringOutput `pulumi:"gatewayName"`
}

// NewTransitModule registers a new resource with the given unique name, arguments, and options.
func NewTransitModule(ctx *pulumi.Context,
	name string, args *TransitModuleArgs, opts ...pulumi.ResourceOption) (*TransitModule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.CloudType == nil {
		return nil, errors.New("invalid value for required argument 'CloudType'")
	}
	if args.GatewayName == nil {
		return nil, errors.New("invalid value for required argument 'GatewayName'")
	}
	if args.GatewaySize == nil {
		return nil, errors.New("invalid value for required argument 'GatewaySize'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	var resource TransitModule
	err := ctx.RegisterRemoteComponentResource("aviatrix:index:TransitModule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type transitModuleArgs struct {
	// Access account name.
	AccountName string `pulumi:"accountName"`
	// Cloud type.
	CloudType int `pulumi:"cloudType"`
	// Name of gateway to be created.
	GatewayName string `pulumi:"gatewayName"`
	// Size of gateway to be created.
	GatewaySize string `pulumi:"gatewaySize"`
	// Name of region.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a TransitModule resource.
type TransitModuleArgs struct {
	// Access account name.
	AccountName pulumi.StringInput
	// Cloud type.
	CloudType pulumi.IntInput
	// Name of gateway to be created.
	GatewayName pulumi.StringInput
	// Size of gateway to be created.
	GatewaySize pulumi.StringInput
	// Name of region.
	Region pulumi.StringInput
}

func (TransitModuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitModuleArgs)(nil)).Elem()
}

type TransitModuleInput interface {
	pulumi.Input

	ToTransitModuleOutput() TransitModuleOutput
	ToTransitModuleOutputWithContext(ctx context.Context) TransitModuleOutput
}

func (*TransitModule) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitModule)(nil)).Elem()
}

func (i *TransitModule) ToTransitModuleOutput() TransitModuleOutput {
	return i.ToTransitModuleOutputWithContext(context.Background())
}

func (i *TransitModule) ToTransitModuleOutputWithContext(ctx context.Context) TransitModuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitModuleOutput)
}

// TransitModuleArrayInput is an input type that accepts TransitModuleArray and TransitModuleArrayOutput values.
// You can construct a concrete instance of `TransitModuleArrayInput` via:
//
//          TransitModuleArray{ TransitModuleArgs{...} }
type TransitModuleArrayInput interface {
	pulumi.Input

	ToTransitModuleArrayOutput() TransitModuleArrayOutput
	ToTransitModuleArrayOutputWithContext(context.Context) TransitModuleArrayOutput
}

type TransitModuleArray []TransitModuleInput

func (TransitModuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitModule)(nil)).Elem()
}

func (i TransitModuleArray) ToTransitModuleArrayOutput() TransitModuleArrayOutput {
	return i.ToTransitModuleArrayOutputWithContext(context.Background())
}

func (i TransitModuleArray) ToTransitModuleArrayOutputWithContext(ctx context.Context) TransitModuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitModuleArrayOutput)
}

// TransitModuleMapInput is an input type that accepts TransitModuleMap and TransitModuleMapOutput values.
// You can construct a concrete instance of `TransitModuleMapInput` via:
//
//          TransitModuleMap{ "key": TransitModuleArgs{...} }
type TransitModuleMapInput interface {
	pulumi.Input

	ToTransitModuleMapOutput() TransitModuleMapOutput
	ToTransitModuleMapOutputWithContext(context.Context) TransitModuleMapOutput
}

type TransitModuleMap map[string]TransitModuleInput

func (TransitModuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitModule)(nil)).Elem()
}

func (i TransitModuleMap) ToTransitModuleMapOutput() TransitModuleMapOutput {
	return i.ToTransitModuleMapOutputWithContext(context.Background())
}

func (i TransitModuleMap) ToTransitModuleMapOutputWithContext(ctx context.Context) TransitModuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitModuleMapOutput)
}

type TransitModuleOutput struct{ *pulumi.OutputState }

func (TransitModuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitModule)(nil)).Elem()
}

func (o TransitModuleOutput) ToTransitModuleOutput() TransitModuleOutput {
	return o
}

func (o TransitModuleOutput) ToTransitModuleOutputWithContext(ctx context.Context) TransitModuleOutput {
	return o
}

type TransitModuleArrayOutput struct{ *pulumi.OutputState }

func (TransitModuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitModule)(nil)).Elem()
}

func (o TransitModuleArrayOutput) ToTransitModuleArrayOutput() TransitModuleArrayOutput {
	return o
}

func (o TransitModuleArrayOutput) ToTransitModuleArrayOutputWithContext(ctx context.Context) TransitModuleArrayOutput {
	return o
}

func (o TransitModuleArrayOutput) Index(i pulumi.IntInput) TransitModuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitModule {
		return vs[0].([]*TransitModule)[vs[1].(int)]
	}).(TransitModuleOutput)
}

type TransitModuleMapOutput struct{ *pulumi.OutputState }

func (TransitModuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitModule)(nil)).Elem()
}

func (o TransitModuleMapOutput) ToTransitModuleMapOutput() TransitModuleMapOutput {
	return o
}

func (o TransitModuleMapOutput) ToTransitModuleMapOutputWithContext(ctx context.Context) TransitModuleMapOutput {
	return o
}

func (o TransitModuleMapOutput) MapIndex(k pulumi.StringInput) TransitModuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitModule {
		return vs[0].(map[string]*TransitModule)[vs[1].(string)]
	}).(TransitModuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitModuleInput)(nil)).Elem(), &TransitModule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitModuleArrayInput)(nil)).Elem(), TransitModuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitModuleMapInput)(nil)).Elem(), TransitModuleMap{})
	pulumi.RegisterOutputType(TransitModuleOutput{})
	pulumi.RegisterOutputType(TransitModuleArrayOutput{})
	pulumi.RegisterOutputType(TransitModuleMapOutput{})
}
